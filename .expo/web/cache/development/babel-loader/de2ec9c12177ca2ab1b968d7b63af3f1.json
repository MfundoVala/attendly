{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SecurityLevel } from \"./LocalAuthentication.types\";\nexport default {\n  get name() {\n    return 'ExpoLocalAuthentication';\n  },\n\n  hasHardwareAsync: function hasHardwareAsync() {\n    return _regeneratorRuntime.async(function hasHardwareAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", false);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  isEnrolledAsync: function isEnrolledAsync() {\n    return _regeneratorRuntime.async(function isEnrolledAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", false);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getEnrolledLevelAsync: function getEnrolledLevelAsync() {\n    return _regeneratorRuntime.async(function getEnrolledLevelAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", SecurityLevel.NONE);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  supportedAuthenticationTypesAsync: function supportedAuthenticationTypesAsync() {\n    return _regeneratorRuntime.async(function supportedAuthenticationTypesAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", []);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoLocalAuthentication.web.ts"],"names":[],"mappings":";AAAA,SAA6B,aAA7B;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,yBAAP;AACD,GAHY;;AAIP,EAAA,gBAJO;AAAA;AAAA;AAAA;AAAA;AAAA,6CAKJ,KALI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,EAAA,eAPO;AAAA;AAAA;AAAA;AAAA;AAAA,8CAQJ,KARI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,EAAA,qBAVO;AAAA;AAAA;AAAA;AAAA;AAAA,8CAWJ,aAAa,CAAC,IAXV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,EAAA,iCAbO;AAAA;AAAA;AAAA;AAAA;AAAA,8CAcJ,EAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { AuthenticationType, SecurityLevel } from './LocalAuthentication.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoLocalAuthentication';\n  },\n  async hasHardwareAsync(): Promise<boolean> {\n    return false;\n  },\n  async isEnrolledAsync(): Promise<boolean> {\n    return false;\n  },\n  async getEnrolledLevelAsync(): Promise<SecurityLevel> {\n    return SecurityLevel.NONE;\n  },\n  async supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n    return [];\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}