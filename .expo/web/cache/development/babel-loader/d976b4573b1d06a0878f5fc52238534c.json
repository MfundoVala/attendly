{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nvar RNBoundary = NativeModules.RNBoundary;\nvar TAG = \"RNBoundary\";\nvar boundaryEventEmitter = new NativeEventEmitter(RNBoundary);\nvar Events = {\n  EXIT: \"onExit\",\n  ENTER: \"onEnter\"\n};\nexport { Events };\n\nvar HeadlessBoundaryEventTask = function HeadlessBoundaryEventTask(_ref) {\n  var event, ids;\n  return _regeneratorRuntime.async(function HeadlessBoundaryEventTask$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          event = _ref.event, ids = _ref.ids;\n          console.log(event, ids);\n          boundaryEventEmitter.emit(event, ids);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nAppRegistry.registerHeadlessTask('OnBoundaryEvent', function () {\n  return HeadlessBoundaryEventTask;\n});\nexport default {\n  add: function add(boundary) {\n    if (!boundary || boundary.constructor !== Array && typeof boundary !== 'object') {\n      throw TAG + ': a boundary must be an array or non-null object';\n    }\n\n    return new Promise(function (resolve, reject) {\n      if (typeof boundary === 'object' && !boundary.id) {\n        reject(TAG + ': an id is required');\n      }\n\n      RNBoundary.add(boundary).then(function (id) {\n        return resolve(id);\n      }).catch(function (e) {\n        return reject(e);\n      });\n    });\n  },\n  on: function on(event, callback) {\n    if (typeof callback !== 'function') {\n      throw TAG + ': callback function must be provided';\n    }\n\n    if (!Object.values(Events).find(function (e) {\n      return e === event;\n    })) {\n      throw TAG + ': invalid event';\n    }\n\n    return boundaryEventEmitter.addListener(event, callback);\n  },\n  off: function off(event) {\n    if (!Object.values(Events).find(function (e) {\n      return e === event;\n    })) {\n      throw TAG + ': invalid event';\n    }\n\n    return boundaryEventEmitter.removeAllListeners(event);\n  },\n  removeAll: function removeAll() {\n    return RNBoundary.removeAll();\n  },\n  remove: function remove(id) {\n    if (!id || id.constructor !== Array && typeof id !== 'string') {\n      throw TAG + ': id must be a string';\n    }\n\n    return RNBoundary.remove(id);\n  }\n};","map":{"version":3,"sources":["/Users/thenewowner/Documents/ReaktiveKoding/attendly/node_modules/react-native-boundary/index.js"],"names":["RNBoundary","NativeModules","TAG","boundaryEventEmitter","NativeEventEmitter","Events","EXIT","ENTER","HeadlessBoundaryEventTask","event","ids","console","log","emit","AppRegistry","registerHeadlessTask","add","boundary","constructor","Array","Promise","resolve","reject","id","then","catch","e","on","callback","Object","values","find","addListener","off","removeAllListeners","removeAll","remove"],"mappings":";;;;AAEA,IAAOA,UAAP,GAAqBC,aAArB,CAAOD,UAAP;AAEA,IAAME,GAAG,GAAG,YAAZ;AAEA,IAAMC,oBAAoB,GAAG,IAAIC,kBAAJ,CAAuBJ,UAAvB,CAA7B;AAEA,IAAMK,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE,QADO;AAEbC,EAAAA,KAAK,EAAE;AAFM,CAAf;AAKA,SACEF,MADF;;AAIA,IAAMG,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,KAAR,QAAQA,KAAR,EAAeC,GAAf,QAAeA,GAAf;AAChCC,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,GAAnB;AACAP,UAAAA,oBAAoB,CAACU,IAArB,CAA0BJ,KAA1B,EAAiCC,GAAjC;;AAFgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC;;AAKAI,WAAW,CAACC,oBAAZ,CAAiC,iBAAjC,EAAoD;AAAA,SAAMP,yBAAN;AAAA,CAApD;AAEA,eAAe;AACbQ,EAAAA,GAAG,EAAE,aAAAC,QAAQ,EAAI;AACf,QAAI,CAACA,QAAD,IAAcA,QAAQ,CAACC,WAAT,KAAyBC,KAAzB,IAAkC,OAAOF,QAAP,KAAoB,QAAxE,EAAmF;AACjF,YAAMf,GAAG,GAAG,kDAAZ;AACD;;AACD,WAAO,IAAIkB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAI,OAAOL,QAAP,KAAoB,QAApB,IAAgC,CAACA,QAAQ,CAACM,EAA9C,EAAkD;AAChDD,QAAAA,MAAM,CAACpB,GAAG,GAAG,qBAAP,CAAN;AACD;;AAEDF,MAAAA,UAAU,CAACgB,GAAX,CAAeC,QAAf,EACGO,IADH,CACQ,UAAAD,EAAE;AAAA,eAAIF,OAAO,CAACE,EAAD,CAAX;AAAA,OADV,EAEGE,KAFH,CAES,UAAAC,CAAC;AAAA,eAAIJ,MAAM,CAACI,CAAD,CAAV;AAAA,OAFV;AAGD,KARM,CAAP;AASD,GAdY;AAgBbC,EAAAA,EAAE,EAAE,YAAClB,KAAD,EAAQmB,QAAR,EAAqB;AACvB,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM1B,GAAG,GAAG,sCAAZ;AACD;;AACD,QAAI,CAAC2B,MAAM,CAACC,MAAP,CAAczB,MAAd,EAAsB0B,IAAtB,CAA2B,UAAAL,CAAC;AAAA,aAAIA,CAAC,KAAKjB,KAAV;AAAA,KAA5B,CAAL,EAAmD;AACjD,YAAMP,GAAG,GAAG,iBAAZ;AACD;;AAED,WAAOC,oBAAoB,CAAC6B,WAArB,CAAiCvB,KAAjC,EAAwCmB,QAAxC,CAAP;AACD,GAzBY;AA2BbK,EAAAA,GAAG,EAAE,aAACxB,KAAD,EAAW;AACd,QAAI,CAACoB,MAAM,CAACC,MAAP,CAAczB,MAAd,EAAsB0B,IAAtB,CAA2B,UAAAL,CAAC;AAAA,aAAIA,CAAC,KAAKjB,KAAV;AAAA,KAA5B,CAAL,EAAmD;AACjD,YAAMP,GAAG,GAAG,iBAAZ;AACD;;AAED,WAAOC,oBAAoB,CAAC+B,kBAArB,CAAwCzB,KAAxC,CAAP;AACD,GAjCY;AAmCb0B,EAAAA,SAAS,EAAE,qBAAM;AACf,WAAOnC,UAAU,CAACmC,SAAX,EAAP;AACD,GArCY;AAuCbC,EAAAA,MAAM,EAAE,gBAAAb,EAAE,EAAI;AACZ,QAAI,CAACA,EAAD,IAAQA,EAAE,CAACL,WAAH,KAAmBC,KAAnB,IAA4B,OAAOI,EAAP,KAAc,QAAtD,EAAiE;AAC/D,YAAMrB,GAAG,GAAG,uBAAZ;AACD;;AAED,WAAOF,UAAU,CAACoC,MAAX,CAAkBb,EAAlB,CAAP;AACD;AA7CY,CAAf","sourcesContent":["import {NativeEventEmitter, NativeModules, AppRegistry} from 'react-native';\n\nconst {RNBoundary} = NativeModules;\n\nconst TAG = \"RNBoundary\";\n\nconst boundaryEventEmitter = new NativeEventEmitter(RNBoundary);\n\nconst Events = {\n  EXIT: \"onExit\",\n  ENTER: \"onEnter\",\n};\n\nexport {\n  Events\n}\n\nconst HeadlessBoundaryEventTask = async ({event, ids}) => {\n  console.log(event, ids);\n  boundaryEventEmitter.emit(event, ids)\n};\n\nAppRegistry.registerHeadlessTask('OnBoundaryEvent', () => HeadlessBoundaryEventTask);\n\nexport default {\n  add: boundary => {\n    if (!boundary || (boundary.constructor !== Array && typeof boundary !== 'object')) {\n      throw TAG + ': a boundary must be an array or non-null object';\n    }\n    return new Promise((resolve, reject) => {\n      if (typeof boundary === 'object' && !boundary.id) {\n        reject(TAG + ': an id is required')\n      }\n\n      RNBoundary.add(boundary)\n        .then(id => resolve(id))\n        .catch(e => reject(e))\n    })\n  },\n\n  on: (event, callback) => {\n    if (typeof callback !== 'function') {\n      throw TAG + ': callback function must be provided';\n    }\n    if (!Object.values(Events).find(e => e === event)) {\n      throw TAG + ': invalid event';\n    }\n\n    return boundaryEventEmitter.addListener(event, callback);\n  },\n\n  off: (event) => {\n    if (!Object.values(Events).find(e => e === event)) {\n      throw TAG + ': invalid event';\n    }\n\n    return boundaryEventEmitter.removeAllListeners(event);\n  },\n\n  removeAll: () => {\n    return RNBoundary.removeAll();\n  },\n\n  remove: id => {\n    if (!id || (id.constructor !== Array && typeof id !== 'string')) {\n      throw TAG + ': id must be a string';\n    }\n\n    return RNBoundary.remove(id);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}